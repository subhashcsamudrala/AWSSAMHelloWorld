Comment: A state machine that does mock book buying.
StartAt: checkInventory
States:
  checkInventory:
    Type: Task
    Resource: "${CheckInventoryArn}"
    Catch:
      - ErrorEquals: 
          - BookNotFoundException
        Next: BookNotFoundError
      - ErrorEquals: 
          - BookOutOfStockException
        Next: BookOutOfStockError        
      - ErrorEquals: 
          - States.ALL
        Next: GeneralError   
    ResultPath: "$"     
    Next: calculateTotal
  calculateTotal:
    Type: Task
    Resource: "${CalculateTotalArn}"
    ResultPath: "$.TotalPrice"
    Next: isRedeemNeeded
  isRedeemNeeded:
    Type: Choice
    Choices:
      - Variable: $.redeem
        BooleanEquals: true
        Next: RedeemPoints
    Default:  BillCustomer
  RedeemPoints:
    Type: Task
    Resource: "${RedeemPointsArn}"  
    Catch:
      - ErrorEquals: 
          - States.ALL
        Next: GeneralError
    ResultPath: "$.OrderTotal"
    Next: BillCustomer
  BillCustomer:
    Type: Task
    Resource: "${BillCustomerArn}"
    ResultPath: "$.BillResponse"
    Next: PrepareOrder
  PrepareOrder:
    Type: Task
    Resource: arn:aws:states:::sql:sendMessage.waitForTaskToken
    Parameters:
      QueueUrl: https://sqs.ap-southeast-2.amazonaws.com/746358375443/OrdersQueue
      MessageBody:
        Input.$:  "$"
        Token.$:  "$$.Task.Token" #From the context object $$
    ResultPath: "$.courierStatus"
    End: true
  BookNotFoundError:
    Type: Pass
    Result: "No such book available"
    End: true
  BookOutOfStockError:
    Type: Pass
    Result: "Sorry! Book out of stock"
    End: true
  GeneralError:
    Type: Pass
    Result: "Sorry! Unable to process due to some error"
    End: true    

